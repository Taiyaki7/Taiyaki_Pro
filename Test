#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <time.h>

//**************************************
//関数の読み込み
//*************************************/
double f1(double t,double u,double y1,double y2);
double f2(double t,double u ,double y1,double y2);
double Current_Ctr(double ref ,double y);
double Speed_Ctr(double ref ,double y);
double Current_RK4(double t ,double u, double y1,double y2);
double Motor_RK4(double t ,double u, double y1,double y2);
double Limit_Voltage (double u);
double LPF(  double x,double wc);
double DOB(double t, double ref,double y);
double Disturbance(double t);
//************************************-


#define Tmax 5.0  //シミュレーション時間[sec]
#define dt 0.001 //刻み時間[sec]
double t=0.0;//経過時間[sec]
//モータパラメータ
//機械系
double J =30*0.001; //慣性モーメント[kg*cm^3]
double B =0.000; //粘性摩擦係数不使用
double Kt =0.5;
//電気系
double Ra = 2;//巻き線抵抗[ohm]
double La = 0.05;//インダクタンス[H]
double Ke =1;//逆起電力定数[V/rad]

//変数
double Vin = 0.0;// 入力電圧[V]
double i_ref = 0.0;
double i=0.0;//出力電流[A]
double w = 0.0;//回転速度[rad/s]
double T_dis = 0.0;//外乱トルク
double d = 0.0;//PID制御関数
double yold = 0.0;//プラント関数数値更新用
double Yhat[2] = {0.0,0.0};
double T = 0.0;//出力トルク
double w_ref =100;
//電流制御パラメータ
double Kp_ACR = 0.03;//Wc*L
double Ki_ACR = 0.05;
double Kd_ACR = 0.000;
//速度制御パラメータ
double Kp_ASR = 0.2;
double Ki_ASR = 0.00010;
double Kd_ASR = 0.0;

//外乱オブザーバパラメータ
double Ktn = 0.5;//ノミナルトルク定数[Nm/A]
double Jn = 30*0.001;//ノミナル慣性モーメント [kg m^3]
double g = 200;//ローパスフィルタカットオフ周波数[rad/sec]
double T_dis_est=0.0;//推定外乱
//リミッター
double Imax = 10;//出力電流最大値
double Vmax = 25;//入力電圧最大値
/*******************************************************/
//
//メイン関数
//
/*******************************************************/
int main()
{
//ファイル書き込み
  char fname[24];
  FILE *fp;
  sprintf(fname,"test.csv");
  if( (fp = fopen( fname, "w" )) == NULL ) {
    printf( "結果ファイルがオープンできませんでした\n" );
    exit( 1 );
  }

//ヘッダファイルへ出力
  fprintf(fp, "経過時間,x1,y\n");
  printf("t,w,i,Tdis_est\n");
  while(t<Tmax)
  {
    fprintf(fp,"%f,%f,%f\n",t,i,w);

//シミュレーション記載
//外乱設定
T_dis= Disturbance(t);
//外乱オブザーバ
 T_dis_est = DOB(t,i_ref,w);

//位置制御ループ

//速度制御ループ
    i_ref =Speed_Ctr(w_ref,w);
//電流制御ループ


    Vin = Current_Ctr(i_ref, i)+T_dis_est/Kt;
//モータ電気系数値更新
    Vin =Limit_Voltage(Vin); //入力電圧の制限

    i = Current_RK4(t,Vin,i,w);
    T =i*Kt - T_dis;
//モータ機械系数値更新
    w = Motor_RK4(t,T,i,w);
    //w = Motor_Plant(t,T,i,w);
    //w =Motor_Plant(t,T,i,w);

    //データio
    printf("%f %f %f %f\n",t,w,i,T_dis_est);
    t +=dt; //経過時間更新
  }
  return 0;
}
/*************************************************
設定外乱
引数：t
戻り値:Td
***************************************************/
double Disturbance(double t){
  double Td=0;
  if(t>1.0){
            Td =2.0; }
  else if(t<=1.0){
            Td =0.0;
                  }

  return Td;
}


/************************************************/
//制御
/***********************************************/
//電流制御系
double Current_Ctr(double ref ,double y)
{
  //PI制御
  static double inte;
  double r =0.0 ;
  double error=0.0;
  error = ref - y;
  inte += error;
  r = Kp_ACR*error + Ki_ACR*inte;
  return  r;
}
//速度制御系
double Speed_Ctr(double ref ,double y)
{
  //PI制御
  static double inte;
  double r =0.0 ;
  double error=0.0;
  error = ref - y;
  inte += error;
  r = Kp_ASR*error + Ki_ASR*inte;
  return  r;
}
//外乱オブザーバ 外乱推定値を返す

/*===========================================================================================================
  DOB()
  引  数 : Iref, dq, i(ch)
  戻り値 : Icmp
  説  明 : 外乱オブザーバ（ジンバル部モータ用）
===========================================================================================================*/
/*

double DOB(double Iref, double dq, int i) {

  double T_dis = 0.0;
  double w = 0.0, x = 0.0;
  static double LPF[CMG_Num];

  w = Ig * wc * dq;
  x = Iref*Kt + w;
  LPF[i] = (LPF[i] + wc * CONTROL_SAMPLING_TIME * x) / (1.0 + wc * CONTROL_SAMPLING_TIME);

  T_dis = LPF[i] - w;
  return T_dis/Kt;
}
*/
//LPF
double LPF(double x,double wc){
	static double y =0.0;
	y += wc *( x - y ) *dt;
	return y;
	}

  double DOB(double t, double ref,double y)
  {//ref:電流指令値 y:回転速度 外乱トルクの推定値を返す
   double tmp;
   tmp = ref*Ktn + g *Jn * w;
   tmp = LPF(tmp,g);
   tmp = tmp - g*Jn*y;
    return tmp;
  }
//Disturbance Observer
/*
double observer( double stat[] , double i_a , double t){
	double tmp , i_com;
	tmp = Ktn * i_a 	+ g * Mn * stat[DX];
	tmp = filter( tmp , g , DT_CONTROL );
	tmp = tmp			- g * Mn * stat[DX];
	i_com = tmp / Ktn ;

	return i_com;
	}
*/



/*************************************************/
//モータプラント
/************************************************/
//電流ループ
double f1(double t,double u,double y1,double y2)
{//y1:電流 y2:回転速度 u:入力電圧
  return -(Ra/La*y1+Ke*y2) + u/La;
}
//速度ループ
double f2(double t,double u,double y1,double y2)
{//y1:電流 y2:回転速度 u:入力トルク
  return  (u/J);
}

/**********************************************************/
//リミッタ
/**********************************************************/
//入力電圧を制限
double Limit_Voltage (double u)
{
 double r;
  if (u>Vmax) {
    r =Vmax;
  }
  else if (u<(-1*Vmax)) {
    r = -1*Vmax;
  }
  return r;
}

/**********************************************************/
//ルンゲクッタ法
/**********************************************************/
//電気系演算
double Current_RK4(double t ,double u, double y1,double y2)
{//u:入力電圧 y1:電流 y2:回転速度
  static double x1;
  double k1[1],k2[1],k3[1],k4[1];
  k1[0]=dt*f1(t,u,y1,y2);

  k2[0]=dt*f1(t+dt/2.0,u,y1+k1[0]/2.0,y2+k1[1]/2.0);

  k3[0]=dt*f1(t+dt/2.0,u,y1+k2[0]/2.0,y2+k2[1]/2.0);

  k4[0]=dt*f1(t+dt,u,y1+k3[0],y2+k3[1]);

  x1=x1+(k1[0]+2.0*k2[0]+2.0*k3[0]+k4[0])/6.0;
}
//機械系演算
double Motor_RK4(double t ,double u, double y1,double y2)
{//u:入力電圧 y1:電流 y2:回転速度
  static double x1;
  double k1[1],k2[1],k3[1],k4[1];
  k1[0]=dt*f2(t,u,y1,y2);

  k2[0]=dt*f2(t+dt/2.0,u,y1+k1[0]/2.0,y2+k1[1]/2.0);

  k3[0]=dt*f2(t+dt/2.0,u,y1+k2[0]/2.0,y2+k2[1]/2.0);

  k4[0]=dt*f2(t+dt,u,y1+k3[0],y2+k3[1]);

  x1=x1+(k1[0]+2.0*k2[0]+2.0*k3[0]+k4[0])/6.0;
}
